name: TELE-MLOPS CI/CD

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed

jobs:
  build-and-deploy:
    name: Build → Push → SCP → Deploy on EC2
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Download artifact from CI workflow
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const artifactName = 'deploy-compose-file';
            const runId = ${{ github.event.workflow_run.id }};

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });

            const match = artifacts.data.artifacts.find(a => a.name === artifactName);

            if (!match) {
              core.setFailed(`No artifact found with name ${artifactName}`);
              return;
            }

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: match.id,
              archive_format: 'zip'
            });

            const zipPath = path.join(process.cwd(), 'artifact.zip');
            fs.writeFileSync(zipPath, Buffer.from(download.data));

            const unzip = require('adm-zip');
            new unzip(zipPath).extractAllTo(process.cwd(), true);

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Upload docker-compose.deploy.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.deploy.yml"
          target: "~/Bank_Customer_Subscription_MLOPS"

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ~/Bank_Customer_Subscription_MLOPS

            echo "Ensuring Docker is available..."
            if ! command -v docker &> /dev/null; then
              sudo apt update && sudo apt install -y docker.io
              sudo systemctl enable --now docker
              sudo usermod -aG docker $USER
            fi

            if ! command -v docker-compose &> /dev/null; then
              sudo apt install -y docker-compose
            fi

            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            docker pull anuragraj03/tele_mlops:custom-airflow
            docker pull anuragraj03/tele_mlops:backend_process
            docker pull anuragraj03/tele_mlops:frontend_run
            docker pull anuragraj03/tele_mlops:src_run
            docker pull anuragraj03/tele_mlops:llm_run
            docker pull anuragraj03/tele_mlops:drift_detector_run

            docker-compose -f docker-compose.deploy.yml down
            docker-compose -f docker-compose.deploy.yml up -d --remove-orphans